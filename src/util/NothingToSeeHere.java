package util;

import db.DatabaseSettings;

import java.util.Date;
import java.util.Random;

public class NothingToSeeHere {

    // This can be whatever, and replaced in use by `chars`
    public static String hash = "ah0iK9Asjk8teB1fgCWSnXEMTY2uULN6VDlRo75OzJ3rmPFpHQyGvqIZ4xcdwb";

    //Password length
    public static int hashlength = 15;

    // Set to some number, has to be the same to decrypt a password(or you could loop through all 62 possibilites of course)
    public static byte factoryCode = 30;

    //Randomly generate this for more security
    public final static byte[] chars = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                                        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                                        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};

    public static String t(String s){
        if(s.length() < 13)
            hashlength = 15;

        while(s.length() > hashlength-2)
            hashlength = hashlength << 1;

        byte[] bytes = new byte[hashlength];

        Random ran = new Random();
        ran.setSeed((new Date()).getTime());

        byte finalByte = translate((byte) hash.charAt(ran.nextInt(hash.length())));
        byte count = translate(chars[s.length()]);
        byte[] rawString = translate(s);

        bytes[0] = clamp((byte)(rawString[0] + finalByte + factoryCode));

        bytes[bytes.length-1] = count;
        bytes[bytes.length-2] = finalByte;
        for(int i = 1; i < rawString.length; ++i){
            bytes[i] = clamp(rawString[i] + factoryCode + accumulation(bytes, i));
        }

        for(int i = rawString.length; i < hashlength-2; ++i){
            bytes[i] = clamp(bytes[i-1] + accumulation(bytes, i));
        }
        return deTranslate(bytes);
    }

    public static String f(String s, int factoryCode){
        byte[] bytes = translate(s);
        byte count = bytes[bytes.length-1];
        byte finalByte = bytes[bytes.length-2];

        if(count > s.length())
            throw new IllegalArgumentException("This password has not been generated by me >:|");

        byte[] decoded = new byte[count];

        decoded[0] = clamp((byte)(bytes[0] - factoryCode - finalByte));

        for(int i = 1; i < count; ++i){
            decoded[i] = clamp((byte)(bytes[i] - factoryCode - accumulation(bytes, i)));
        }
        return deTranslate(decoded);
    }

    public static String f(String s){
        byte[] bytes = translate(s);
        byte count = bytes[bytes.length-1];
        byte finalByte = bytes[bytes.length-2];

        if(count > s.length())
            throw new IllegalArgumentException("This password has not been generated by me >:|");

        byte[] decoded = new byte[count];

        decoded[0] = clamp((byte)(bytes[0] - factoryCode - finalByte));

        for(int i = 1; i < count; ++i){
            decoded[i] = clamp((byte)(bytes[i] - factoryCode - accumulation(bytes, i)));
        }
        return deTranslate(decoded);
    }

    private static int accumulation(byte[] bytes, int lastIndex){
        int b = 0;
        if(lastIndex > bytes.length)
            throw new IllegalArgumentException("Index larger than array length");

        for(int i = 0; i < lastIndex; ++i){
            b += bytes[i];
        }
        return b;
    }

    private static byte clamp(int b){
        if(b >= chars.length)
            return clamp((byte)(b - chars.length));
        if(b < 0)
            return clamp((byte)(b + chars.length));
        return (byte)b;
    }

    private static String deTranslate(byte[] bytes){
        byte[] newBytes = new byte[bytes.length];

        for(int i = 0; i < bytes.length; ++i){
            newBytes[i] = chars[bytes[i]];
        }
        return new String(newBytes);
    }

    private static byte[] translate(String s){
        byte[] indices = new byte[s.length()];
        for(int i = 0; i < indices.length; ++i) {
            indices[i] = translate((byte) s.charAt(i));
        }
        return indices;
    }

    private static byte translate(byte b){
        for(int i = 0; i < chars.length; i++){
            if(chars[i] == b){
                return (byte)i;
            }
        }
        throw new IllegalArgumentException("Byte(ASCII) " + b + " is not a legal password-character");
    }

    public static void main(String[] args){
        String test = "151236216174";

        p(t(test));
        p(f(t(test)));

        p(t(DatabaseSettings.db_user));
        p(t(DatabaseSettings.db_pw));
    }

    private static void p(String s){
        System.out.println(s);
    }

    private static void p(byte[] b){
        for(byte by : b){
            System.out.print(by + ", ");
        }
        System.out.print("\n");
    }
}
